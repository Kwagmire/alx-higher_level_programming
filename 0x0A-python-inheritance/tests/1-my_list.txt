
=======================
How to Use 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, which will return
an empty list:

::
	>>> MyList = __import__('1-my_list').MyList
        >>> my_list = MyList()
	>>> type(my_list)
	<class '1-my_list.MyList'>

	>>> print(my_list)
	[]

Or a single argument, which must be an iterable object.

::

	>>> my_list = MyList([1, 2, 3])
	>>> print(my_list)
	[1, 2, 3]

	>>> my_list = MyList(None)
	Traceback (most recent call last):
	TypeError: 'NoneType' object is not iterable

A ``TypeError`` will be raised for any more than one instantiation arguments.

::

	>>> my_list = MyList([1, 2], [3, 4])
	Traceback (most recent call last):
	TypeError: list expected at most 1 argument, got 2

Usage
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> print(my_list)
	[1, 2, 3]

``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

	>>> my_list = MyList()
	>>> print(my_list.print_sorted)
	<bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is
provided.

::

	>>> my_list.print_sorted(1)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

::

	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(-1)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, -1, 5]

	>>> my_list.print_sorted()
	[-1, 1, 2, 4, 5]

Original list is unaltered.

::

	>>> print(my_list)
	[1, 4, 2, -1, 5]

Works even if appending is unsorted
::

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(4)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 2, 3, 4, 5]

	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

Nothing to sort with empty lists.

::
	
	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]
