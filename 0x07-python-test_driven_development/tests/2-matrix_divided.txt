
==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided()``.

Usage
=====

``matrix_divided(matrix, div)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.
Quotients are rounded to a maximum of two decimal places.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
        >>> matrix = [
	...	[1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

If ``div`` is infinity, all values become 0.0

::

	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

If any element of the matrix is infinity or NaN, the element becomes infinity or NaN

::

	>>> matrix2 = [
	...	[1, 2, float('inf')],
	...	[4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix2, 3))
	[[0.33, 0.67, inf], [1.33, 1.67, 2.0]]

And if the ``div`` is infinity ir Nan...

::

	>>> print(matrix_divided(matrix2, float('inf')))
	[[0.0, 0.0, nan], [0.0, 0.0, 0.0]]

The original matrix is left unchanged.

::

	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]

The function must take 2 arguments.

::

	>>> print(matrix_divided(matrix))
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
Invalid Matrices
================

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::
	
	>>> matrix = "not a list"
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::
	
	>>> matrix = []
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 3))
	[[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, "not a number", 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

	>>> matrix = [
	...     [1, 2, 3, 4],
	...     [5, 6, 7]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, "not a number"))
	Traceback (most recent call last):
	TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
